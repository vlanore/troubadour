#!/usr/bin/env python

"""Troubadour command line interface

Usage:
  troubadour make [options] <project-directory> <main>
  troubadour (-h | --help)

Options:
  -d <dir> --dest <dir>    Destination directory [default: ./build]
  -h --help                Show this screen
"""

import importlib.resources as pkg_resources
from importlib.util import find_spec
import sys
from pathlib import Path
from string import Template
from typing import Any

from docopt import docopt
from termcolor import colored

import templates


def section(text: str) -> None:
    print(colored(f"\n~ {text} ~", "blue", attrs=["bold"]))


def param(text: Any) -> str:
    return colored(str(text), "magenta")


def data(text: Any) -> str:
    return colored(str(text), "cyan")


def success(text: str) -> None:
    print(f"{text}:", colored("OK", "green"))


def error(text: str) -> None:
    print(f"{text}:", colored("Error", "red"))


# ======================================================================================
section("Command line arguments")
arguments = docopt(__doc__)
proj_dir = Path(arguments["<project-directory>"])
main = proj_dir / Path(arguments["<main>"])
dest = Path(arguments["--dest"])
print(f"Project directory: {param(proj_dir)}")
print(f"Main script: {param(main)}")
print(f"Destination directory: {param(dest)}")

# ======================================================================================
section("Creating dest directory")
dest.mkdir(parents=True, exist_ok=True)
success(f"Creating dest directory at {data(dest)}")

# ======================================================================================
section("Computing list of files")
files_to_include = list(proj_dir.rglob("[!_]*.py"))
success("Getting list of python files")
print(f"Found {data(str(len(files_to_include))+' files')}")
if main in files_to_include:
    success("Main file in directory")
else:
    error("Main file in directory")
    sys.exit(1)

# ======================================================================================
section("Setup troubadour symlinks for devmode")
troubadour_spec = find_spec("troubadour")
assert troubadour_spec is not None and troubadour_spec.origin is not None
troubadour_path = Path(troubadour_spec.origin).parent.parent
assert (troubadour_path / "troubadour").is_dir()
print(f"Troubadour install located at {data(troubadour_path)}")

troubadour_symlink = dest / "troubadour"
print(f"Troubadour symlink path: {data(troubadour_symlink)}")
if troubadour_symlink.is_symlink():
    print("Symlink already present, points to", data(troubadour_symlink.readlink()))
    if troubadour_symlink.readlink() != troubadour_path:
        troubadour_symlink.unlink()
        success("Removed incorrect symlink")
        troubadour_symlink.symlink_to(troubadour_path, target_is_directory=True)
        success("Creating troubadour symlink")
else:
    troubadour_symlink.symlink_to(troubadour_path, target_is_directory=True)
    success("Creating troubadour symlink")

# ======================================================================================
section("Fetch troubadour files for devmode")
troubadour_files = [
    p.relative_to(troubadour_symlink)
    for p in (troubadour_symlink / "troubadour").rglob("*.py")
]
success("Getting list of troubadpir files")
print(f"Found {data(str(len(troubadour_files))+' files')}")

# ======================================================================================
section("Generating index file from template")
index_template = Template(pkg_resources.read_text(templates, "index.html"))
success("Loading template")
packages = ["jsonpickle", "mistune"]
print("Pip packages are:", ", ".join(data(p) for p in packages))
result = index_template.substitute(
    dict(
        file_list=",\n            ".join(f'"{str(file)}"' for file in files_to_include),
        main_file=f'"../{main}"',
        packages=", ".join(f'"{package}"' for package in packages),
        troubadour_files=",\n            ".join(
            f'"{str(file)}"' for file in troubadour_files
        ),
    )
)
success("Generate file from template")

# ======================================================================================
section("Write to destination file")
dest_index = dest / "index.html"
success(f"Build directory ({data(dest)})")
with dest_index.open("w") as f:
    f.write(result)
success(f"Written {data(dest_index)}")
